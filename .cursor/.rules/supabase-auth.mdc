---
description:
globs:
alwaysApply: false
---
# Supabase Auth Integration with Flask

Use this guide to integrate Supabase email/password authentication into a Flask application for SmartWydatki, leveraging Supabase RLS and session-based auth.

## Before we start

IMPORTANT: Decide which routes and templates require authentication (e.g., dashboard, expense routes, settings). Protect them using Flask-Login or a custom `@login_required` decorator.

## Core Requirements

1. Use the Python Supabase client (`supabase-py`) for all auth operations.
2. Store `access_token` and `refresh_token` in Flask sessions or secure HTTP-only cookies.
3. Protect routes using `flask_login` or a custom decorator.
4. Enforce RLS in Supabase tables so each user can only access their own data.

## Installation

```bash
pip install Flask supabase python-dotenv flask-login
```

## Environment Variables

Create a `.env` file in the project root:

```env
FLASK_APP=run.py
FLASK_ENV=development
SECRET_KEY=your_flask_secret_key
SUPABASE_URL=your_project_url
SUPABASE_KEY=your_anon_key
```

Load environment variables in your application (e.g., in `config.py`):

```python
import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    SECRET_KEY = os.getenv("SECRET_KEY")
    SUPABASE_URL = os.getenv("SUPABASE_URL")
    SUPABASE_KEY = os.getenv("SUPABASE_KEY")
```

## Implementation Steps

### 1. Initialize the Supabase Client

Create `app/supabase_client.py`:

```python
# app/supabase_client.py
import os
from supabase import create_client, Client
from flask import current_app

def get_supabase_client() -> Client:
    url = current_app.config["SUPABASE_URL"]
    key = current_app.config["SUPABASE_KEY"]
    return create_client(url, key)
```

In `app/__init__.py`, set up Flask and Flask-Login:

```python
from flask import Flask
from flask_login import LoginManager
from .config import Config

login_manager = LoginManager()
login_manager.login_view = "auth.login"

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    login_manager.init_app(app)

    from app.auth.routes import auth_bp
    app.register_blueprint(auth_bp)

    # Register other blueprints (dashboard, expenses, categories)...

    return app
```

### 2. Define User Model and Loader

Create `app/auth/models.py`:

```python
# app/auth/models.py
from flask_login import UserMixin

class User(UserMixin):
    def __init__(self, id, email, access_token, refresh_token):
        self.id = id
        self.email = email
        self.access_token = access_token
        self.refresh_token = refresh_token
```

In `app/__init__.py`, add the user loader:

```python
from flask import session
from app.supabase_client import get_supabase_client
from app.auth.models import User

@login_manager.user_loader
def load_user(user_id):
    access_token = session.get("access_token")
    if not access_token:
        return None
    auth = get_supabase_client().auth
    user_resp = auth.get_user(access_token)
    user_data = user_resp.data.user if hasattr(user_resp, 'data') else user_resp['data']['user']
    if user_data:
        return User(user_data['id'], user_data['email'], access_token, session.get("refresh_token"))
    return None
```

### 3. Create Auth Blueprint

Create `app/auth/routes.py`:

```python
from flask import Blueprint, render_template, request, redirect, url_for, session, flash, current_app
from flask_login import login_user, logout_user, login_required
from app.supabase_client import get_supabase_client
from .models import User

auth_bp = Blueprint("auth", __name__, url_prefix="/auth")

@auth_bp.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        email = request.form["email"]
        password = request.form["password"]
        confirm = request.form["confirm_password"]
        if password != confirm:
            flash("Hasła muszą być identyczne", "danger")
            return redirect(url_for("auth.register"))
        auth = get_supabase_client().auth
        resp = auth.sign_up({"email": email, "password": password})
        error = getattr(resp, 'error', resp.get('error'))
        if error:
            flash(error.message if hasattr(error, 'message') else error, "danger")
        else:
            session["access_token"] = resp.data.session.access_token if hasattr(resp, 'data') else resp['data']['session']['access_token']
            session["refresh_token"] = resp.data.session.refresh_token if hasattr(resp, 'data') else resp['data']['session']['refresh_token']
            user_obj = resp.data.user if hasattr(resp, 'data') else resp['data']['user']
            user = User(user_obj['id'], user_obj['email'], session["access_token"], session["refresh_token"])
            login_user(user)
            return redirect(url_for("onboarding.index"))
    return render_template("auth/register.html")

@auth_bp.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form["email"]
        password = request.form["password"]
        auth = get_supabase_client().auth
        resp = auth.sign_in_with_password({"email": email, "password": password})
        error = getattr(resp, 'error', resp.get('error'))
        if error:
            flash(error.message if hasattr(error, 'message') else error, "danger")
        else:
            session["access_token"] = resp.data.session.access_token if hasattr(resp, 'data') else resp['data']['session']['access_token']
            session["refresh_token"] = resp.data.session.refresh_token if hasattr(resp, 'data') else resp['data']['session']['refresh_token']
            user_obj = resp.data.user if hasattr(resp, 'data') else resp['data']['user']
            user = User(user_obj['id'], user_obj['email'], session["access_token"], session["refresh_token"])
            login_user(user)
            return redirect(url_for("dashboard.index"))
    return render_template("auth/login.html")

@auth_bp.route("/logout", methods=["POST"])
@login_required
def logout():
    auth = get_supabase_client().auth
    auth.sign_out()
    session.clear()
    logout_user()
    return redirect(url_for("auth.login"))
```

### 4. Password Management

**Change Password**

```python
@auth_bp.route("/password/change", methods=["POST"])
@login_required
def change_password():
    new_password = request.form["new_password"]
    auth = get_supabase_client().auth
    resp = auth.update_user({"password": new_password})
    error = getattr(resp, 'error', resp.get('error'))
    if error:
        flash(error.message if hasattr(error, 'message') else error, "danger")
    else:
        flash("Hasło zostało zmienione", "success")
    return redirect(url_for("settings.account"))
```

**Reset Password**

```python
@auth_bp.route("/password/reset", methods=["POST"])
def reset_password():
    email = request.form["email"]
    auth = get_supabase_client().auth
    resp = auth.reset_password_for_email(email)
    error = getattr(resp, 'error', resp.get('error'))
    if error:
        flash(error.message if hasattr(error, 'message') else error, "danger")
    else:
        flash("Link resetujący hasło wysłany e-mailem", "info")
    return redirect(url_for("auth.login"))
```

### 5. Account Deletion

```python
@auth_bp.route("/account/delete", methods=["POST"])
@login_required
def delete_account():
    user_id = current_user.id
    from supabase import create_client
    supabase_admin = create_client(
        current_app.config["SUPABASE_URL"],
        current_app.config.get("SUPABASE_SERVICE_ROLE_KEY")
    )
    resp = supabase_admin.auth.api.delete_user(user_id)
    error = getattr(resp, 'error', resp.get('error'))
    if error:
        flash(error.message if hasattr(error, 'message') else error, "danger")
    else:
        session.clear()
        logout_user()
        flash("Konto zostało usunięte", "success")
    return redirect(url_for("auth.register"))
```

### 6. Protecting Routes

Use `@login_required` on protected endpoints:

```python
@app.route("/expenses")
@login_required
def expenses_list():
    ...
```

In Jinja templates:

```jinja
{% if current_user.is_authenticated %}
  <a href="{{ url_for('auth.logout') }}">Wyloguj</a>
{% else %}
  <a href="{{ url_for('auth.login') }}">Zaloguj</a>
{% endif %}
```

## Security Best Practices

- Use `SECRET_KEY` for Flask sessions and enable `SESSION_COOKIE_SECURE`, `SESSION_COOKIE_HTTPONLY`.
- Validate and sanitize all user inputs on the server side.
- Use Supabase RLS policies to enforce per-user data access.
- Do not expose Supabase anon or service_role keys in client-side code.
- Log all auth operations in the `logs` table with user_id, timestamp, type, error_code, and message.

## Common Pitfalls

1. Forgetting to call `login_user` after login.
2. Not storing tokens or forgetting to refresh expired sessions.
3. Exposing keys or bypassing RLS.
4. Skipping route protection with `@login_required`.
5. Misconfiguring environment variables or cookie settings.
